import { useCallback } from "react";

export const useDataExport = () => {
  const exportToCSV = useCallback((data, title) => {
    // Convert chart data to CSV format
    let csvContent = `${title}\n`;

    if (data.chartData) {
      csvContent += "X,Y\n";
      data.chartData.x.forEach((x, i) => {
        csvContent += `${x},${data.chartData.y[i]}\n`;
      });
    }

    const blob = new Blob([csvContent], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${title.replace(/\s+/g, "_")}.csv`;
    link.click();
    window.URL.revokeObjectURL(url);
  }, []);

  const exportToNetCDF = useCallback((data, title) => {
    // For NetCDF, you'd typically use a library like netcdfjs
    // This is a simplified implementation
    const jsonData = JSON.stringify(
      {
        title,
        data: data.chartData,
        metadata: {
          created: new Date().toISOString(),
          source: "FloatChat Ocean Data",
        },
      },
      null,
      2
    );

    const blob = new Blob([jsonData], { type: "application/json" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${title.replace(/\s+/g, "_")}.nc.json`;
    link.click();
    window.URL.revokeObjectURL(url);
  }, []);

  const exportToPDF = useCallback((data, chartType, content, title) => {
    // For PDF generation, you'd use libraries like jsPDF or Puppeteer
    // This is a simplified implementation that creates an HTML report
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .header { color: #00bcd4; border-bottom: 2px solid #00bcd4; padding-bottom: 10px; }
            .content { margin: 20px 0; }
            .data-section { background: #f5f5f5; padding: 20px; border-radius: 8px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${title}</h1>
            <p>Generated by FloatChat - ${new Date().toLocaleString()}</p>
          </div>
          <div class="content">
            <h2>Analysis</h2>
            <p>${content}</p>
          </div>
          <div class="data-section">
            <h2>Data Summary</h2>
            <p>Chart Type: ${chartType}</p>
            <p>Data Points: ${data.chartData?.x?.length || "N/A"}</p>
            ${data.value ? `<p>Primary Value: ${data.value}</p>` : ""}
            ${data.change ? `<p>Change: ${data.change}</p>` : ""}
          </div>
        </body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: "text/html" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${title.replace(/\s+/g, "_")}_report.html`;
    link.click();
    window.URL.revokeObjectURL(url);
  }, []);

  const exportChartImage = useCallback((data, chartType, title) => {
    // This would typically use html2canvas or similar to capture the chart
    console.log("Exporting chart image:", { data, chartType, title });
    alert("Chart image export would be implemented with html2canvas library");
  }, []);

  return {
    exportToCSV,
    exportToNetCDF,
    exportToPDF,
    exportChartImage,
  };
};
